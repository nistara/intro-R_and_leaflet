[
["index.html", "Intro R and Interactive Mapping", " Intro R and Interactive Mapping Nistara Randhawa Materials from the 2019 PREDICT Data Conference. "],
["data-project-management.html", "1 Data project management", " 1 Data project management Slides Best practices Project organization Put each project in its own directory, which is named after the project. Put text documents associated with the project in the docs (or documents) directory. Put raw data and metadata in a data directory Put files generated during analysis in a results directory. Put project R code in the R directory. Naming files File names should be both machine and human readable. Name all files to reflect their content or function. Raw data Save the raw data, and do not modify it directly. Record all the steps used to process data. Backing up/Keeping track of changes Back up (almost) everything created by a human being as soon as it is created. Keep changes small. Create, maintain, and use a checklist for saving and sharing changes to the project. Store each project in a folder that is mirrored off the researcher’s working machine. Copy the entire project whenever a significant change has been made. Software/Code Place a brief explanatory comment at the start of every program. Give functions and variables meaningful names. Make dependencies and requirements explicit. Collaboration Create an overview of your project. Create a shared “to-do” list for the project. Decide on communication and shared writing strategies, e.g. using google docs. References This lesson has been adapted from the following sources: Wilson, G., Bryan, J., Cranston, K., Kitzes, J., Nederbragt, L., &amp; Teal, T. K. (2017). Good enough practices in scientific computing (F. Ouellette, Ed.) [Data set]. https://doi.org/10.1371/journal.pcbi.1005510 Naming files by Jenny Bryan How to make your research reproducible: Managing Your Project "],
["introduction-to-r-rstudio.html", "2 Introduction to R &amp; RStudio", " 2 Introduction to R &amp; RStudio Learning Objectives By the end of this lesson, you will: Know what R is and what some of its uses can be Be familiar with the four main panels in RStudio Know how to interact with R Be able to install a package in R Be able to manage your R environment "],
["what-is-r-and-why-use-it.html", "What is R and why use it", " What is R and why use it Slides Link to online presentation "],
["introduction-to-rstudio.html", "Introduction to RStudio", " Introduction to RStudio RStudio is a free, open source R integrated development environment, i.e., it makes it easier for us to work with R. It provides a built in editor, works on all platforms (Windows, Mac and Linux) and provides many advantages such as integration with project management. When you first open RStudio, you will be greeted by three panels: The interactive R console (entire left) Environment/History (tabbed in upper right) Files/Plots/Packages/Help/Viewer (tabbed in lower right) RStudio when you first open it To open a new R script (i.e. an R file), go to File -&gt; New File -&gt; R Script RStudio with an open R file/script Once you open files, such as R scripts, an editor panel will also open in the top left. "],
["interact-with-r.html", "Interact with R", " Interact with R When we work with R, we are writing down instructions for the computer to follow. We call these instructions commands, and the process of telling a computer to start following our commands is called execution, or running the command. Hence, remember: COMMANDS: the “instructions” that we tell the computer to follow. EXECUTE/RUN: When we execute a command, we are telling the computer to carry it out. "],
["two-main-ways-you-can-program-within-rstudio.html", "Two main ways you can program within RStudio", " Two main ways you can program within RStudio Type commands directly in the R console and press enter. The results are displayed immediately under the command. Your code is lost once you close your R session though. OR Start writing in an .R file (the R script file) and use RStudio’s short cut keys for running the command, i.e. sending it to the interactive console. - This is a great way to work because all your code is saved for later use as well. "],
["running-your-commandscode-from-the-r-script-file.html", "Running your commands/code from the R script file", " Running your commands/code from the R script file To run the current line, you can Click on the Run button above the editor panel OR Hit Ctrl+Return in Windows or ⌘+Return on Macs. To run a block of code, select it and then run as above. The R console shows a blinking &gt; prompt when it is ready to accept commands. When you run a command, R will try to execute it, show the results, and come back with a new &gt; prompt, indicating it is ready for the next command. "],
["if-you-run-an-incomplete-command.html", "If you run an incomplete command", " If you run an incomplete command If your command isn’t complete but you still run it, the R console will show a + prompt, indicating that it is waiting for the rest of the command. A common reason for incomplete commands: you haven’t closed a parenthesis or a quotation, i.e. you don’t have the same number of left-parentheses as right-parentheses, or the same number of opening and closing quotation marks To cancel a command, click inside the console window and press Esc and you will return to the &gt; prompt. "],
["anything-starting-with-a-is-not-executed.html", "Anything starting with a # is not executed", " Anything starting with a # is not executed You can add comments in R by prefixing them with # Comments are extremely useful as you code. Consider them as love letters to your future self, to help you understand what you did a day, a week, a month, or even years ago! # This is a comment ############ This is also a comment # You can write whatever you want 2 + 2 # the words after &quot;#&quot; are a comment This is not a comment and running this line will give you an error "],
["install-a-package-in-r.html", "Install a package in R", " Install a package in R But first, what’s a package and why do we need it? A package, in R is like a toolbox for working with R Packages provide tools such as functions which help you make use of all R can do A function may calculate the sum of numbers make a plot with your data help you filter and sort your data make maps with your data and a lot more! Almost everything in R is done through functions Functions manipulate objects An object is anything that can be assigned to a variable name An object may be: your Event Data which you bring into R and assign to the variable name event so you can reference it in your code your plot numbers, characters, and other types of data structures it may even be another function! R already has many inbuilt functions, so packages extend what you can do in R. "],
["two-ways-to-install-packages-in-rrstudio.html", "Two ways to install packages in R/Rstudio", " Two ways to install packages in R/Rstudio Example package: beepr We use the install.packages() function. The basic format is: install.packages(&quot;package_name&quot;) So to install the beepr package, the command is: install.packages(&quot;beepr&quot;) Through the RStudio packages panel: "],
["load-a-package-library-in-r.html", "Load a package library in R", " Load a package library in R Once the package is installed, to use it, you load the package library at the top of your script like this: # load libraries library(package_name) Note that you don’t need to use quotes around the package name when you call it using the library() function. But you do need the quotes when you install a package. When you load a package (look at it like a library of functions) in R, you are telling R to make all of the FUNCTIONS in the package available to you in your code. When you work with your datasets in R later, you will always load all relevant packages before you start running any other code. "],
["try-a-package-function.html", "Try a package function", " Try a package function Run the following command from the beepr package: beep() A function consists of: function name: beep parenthesis: () argument(s): what you provide to a function in the (). We didn’t need to give beep any argument, but we could have. how do we know we could give it an argument? we see the help file or documentation of the beep() function "],
["how-to-find-help-for-a-function.html", "How to find help for a function", " How to find help for a function Run ?function_name OR Run help(function_name) Note the absence of parenthesis () after function_name above. So running: ?beep Gives the following in the help panel: It has two arguments, sound and expr, both of which have default values, so they do not need to be provided by us. But if we wanted to tell beep() to play a different sound, we would have to provide a value for the sound argument from one of the many possible sounds as seen in the help file. The Examples in help files can be very useful for trying out functions and understanding how they work. Now try: beep(10) beepr::beep(&quot;facebook&quot;) beep(&quot;fanfare&quot;) # or any of the other sounds from the help file Do you have to read the entire help file? No As you begin to learn R, skim through help files and pay attention to the description, arguments (if you don’t know what to use), and most importantly, the examples. "],
["manage-your-r-working-environment.html", "Manage your R working environment", " Manage your R working environment Finally, let’s see what your main working directory looks like. Use the getwd() function to find out what your current working directory is in R. To view working directory getwd() To set working directory setwd(&quot;/path/to/your/project_folder&quot;) If you work with windows, you could also use setwd(&quot;C:\\\\path\\\\to\\\\your\\\\project_folder&quot;) Or use the RStudio menu options "],
["better-use-r-projects-instead-of-setting-the-working-directory.html", "Better: Use R projects instead of setting the working directory", " Better: Use R projects instead of setting the working directory Each project of yours would correspond to its R project You don’t need to set working directories Your files within the project are easily accessible and you don’t need to speciy the full file paths It makes your life much, much easier To make an R project corresponding to the conference folder (2019_predict_conference): You’ve now got a basic outlook of how to work with R and RStudio "],
["one-page-summary-of-r-commands.html", "One-page summary of R commands", " One-page summary of R commands Source: Bianca Peterson "],
["references-1.html", "References", " References This lesson has been adapted from the following sources: Data Carpentry: R for data analysis and visualization of Ecological Data Earth Analytics Course: Learn Data Science by University of Colorado’s Earth Lab "],
["interactive-maps-with-r.html", "3 Interactive maps with R", " 3 Interactive maps with R Code for this lesson Learning objectives: After this tutorial, you will be able to create an interactive map in R using the leaflet package. Why interactive maps? While static maps are useful for reports and presentations, interactive maps allow you to pan around and zoom into any part of a your geographic dataset using a web map to put your data into context. Interactive maps also provide options for different interactivity types, for e.g. popups which provide information about your data when clicked on the map. The package we use for making interactive maps is called Leaflet, and it has an excellent documentation website: check it out here. R packages needed for this session library(dplyr) library(leaflet) library(htmlwidgets) Reading in data events = read.csv(&quot;data/sample/event_short.csv&quot;, stringsAsFactors = FALSE) animals = read.csv(&quot;data/sample/animal_short.csv&quot;, stringsAsFactors = FALSE) Check what we just imported # Check what we have: head(events) # What&#39;s the structure of our event data? str(events) Similarly, for the animals data: head(animals) str(animals) Getting unique sites for mapping (to avoid overlapping) sites = events %&gt;% group_by(SiteName, StateProv, District, SiteLatitude, SiteLongitude) %&gt;% summarise(n = n()) Starting with leaflet The leaflet package enables us to create beautiful interactive maps in R. To begin, let’s create an empty map. See what running the following command gives you. leaflet() %&gt;% addTiles() Use a more aesthetic base map, similar to the ones we used in the QGIS session. To see all your options fo extra base maps, see here. leaflet() %&gt;% addProviderTiles(providers$Esri.NatGeoWorldMap) That’s better. Map your data Now, let’s add our site data. We do that with the addCircleMarkers function. If you want to see what arguments it needs, run ?addCircleMarkers in your R console. map_sites = leaflet() %&gt;% addProviderTiles(providers$Esri.NatGeoWorldMap) %&gt;% addCircleMarkers(data = sites, lng = ~SiteLongitude, lat = ~SiteLatitude) map_sites Now adjust the size of the site circle markers. map_sites = leaflet() %&gt;% addProviderTiles(providers$Esri.NatGeoWorldMap) %&gt;% addCircleMarkers(data = sites, lng = ~SiteLongitude, lat = ~SiteLatitude, radius = 4) map_sites Show popups How about we add some popup information? If you click on a point, a popup will display whatever information you set it up to show. map_sites = leaflet() %&gt;% addProviderTiles(providers$Esri.NatGeoWorldMap) %&gt;% addCircleMarkers(data = sites, lng = ~SiteLongitude, lat = ~SiteLatitude, radius = 4, popup = ~SiteName) map_sites For the above, we set it so the Site Name would pop up. We can add much more information from our dataset. # More detailed popups sites$site_info = paste0(&quot;Site name: &quot;, sites$SiteName, &quot;&lt;br&gt;&quot;, &quot;StateProv: &quot;, sites$StateProv, &quot;&lt;br&gt;&quot;, &quot;District: &quot;, sites$District, &quot;&lt;br&gt;&quot;, &quot;Latitude: &quot;, sites$SiteLatitude, &quot;&lt;br&gt;&quot;, &quot;Longitude: &quot;, sites$SiteLongitude) map_site_info = leaflet() %&gt;% addProviderTiles(providers$Esri.NatGeoWorldMap) %&gt;% addCircleMarkers(data = sites, lng = ~SiteLongitude, lat = ~SiteLatitude, radius = 4, popup = ~site_info) map_site_info Adding a country polygon To help put our site locations into context, we import a polygon layer for our country, and display it below the site data. ctry_poly = readRDS(&quot;data/GIS/country_polygons/USA/gadm36_USA_1_sp.rds&quot;) map_ctry_poly = leaflet() %&gt;% addProviderTiles(providers$Esri.NatGeoWorldMap) %&gt;% addPolygons(data = ctry_poly) map_ctry_poly # change the color of the polygon map_ctry_poly = leaflet() %&gt;% addProviderTiles(providers$Esri.NatGeoWorldMap) %&gt;% addPolygons(data = ctry_poly, color = &quot;green&quot;) map_ctry_poly Put it all together map = leaflet() %&gt;% addProviderTiles(providers$Esri.NatGeoWorldMap) %&gt;% addPolygons(data = ctry_poly, color = &quot;green&quot;) %&gt;% addCircleMarkers(data = sites, lng = ~SiteLongitude, lat = ~SiteLatitude, weight = 3, radius = 4, opacity = 0.7, popup = ~site_info) map Give options for turning layers on/off map = leaflet() %&gt;% addProviderTiles(providers$Esri.NatGeoWorldMap, group = &quot;NatGeo&quot;) %&gt;% addPolygons(data = ctry_poly, color = &quot;green&quot;, group = &quot;USA regions&quot;) %&gt;% addCircleMarkers(data = sites, lng = ~SiteLongitude, lat = ~SiteLatitude, weight = 3, radius = 4, opacity = 0.7, popup = ~site_info, group = &quot;Sites&quot;) map = map %&gt;% addLayersControl( overlayGroups = c(&quot;USA regions&quot;, &quot;Sites&quot;), options = layersControlOptions(collapsed = FALSE)) map Add the animal sampling data We add the animal data and use the clusterOptions argument so that leaflet aggregates the numbers for us. # first, let&#39;s map animals as is (without sites) map_animals = leaflet() %&gt;% addProviderTiles(providers$Esri.NatGeoWorldMap, group = &quot;NatGeo&quot;) %&gt;% addPolygons(data = ctry_poly, color = &quot;green&quot;, group = &quot;USA regions&quot;) %&gt;% addCircleMarkers(data = animals, lng = ~SiteLongitude, lat = ~SiteLatitude, weight = 2, radius = 4, group = &quot;Animal clusters&quot;) map_animals # now, let&#39;s try the aggregation argument `clusterOptions`, which enables us to # show numbers of animals map_animals = leaflet() %&gt;% addProviderTiles(providers$Esri.NatGeoWorldMap, group = &quot;NatGeo&quot;) %&gt;% addPolygons(data = ctry_poly, group = &quot;USA regions&quot;) %&gt;% addCircleMarkers(data = animals, lng = ~SiteLongitude, lat = ~SiteLatitude, weight = 2, radius = 4, group = &quot;Animal clusters&quot;, clusterOptions = markerClusterOptions()) map_animals # Finally, let&#39;s add our animal data to the map with event data in it # ============================================================================== map = leaflet() %&gt;% addProviderTiles(providers$Esri.NatGeoWorldMap, group = &quot;NatGeo&quot;) %&gt;% addPolygons(data = ctry_poly, color = &quot;green&quot;, group = &quot;USA regions&quot;) %&gt;% addCircleMarkers(data = sites, lng = ~SiteLongitude, lat = ~SiteLatitude, weight = 3, radius = 4, opacity = 0.7, popup = ~site_info, group = &quot;Sites&quot;) %&gt;% addCircleMarkers(data = animals, lng = ~SiteLongitude, lat = ~SiteLatitude, weight = 2, radius = 4, group = &quot;Animal clusters&quot;, clusterOptions = markerClusterOptions()) map = map %&gt;% addLayersControl( overlayGroups = c(&quot;USA regions&quot;, &quot;Sites&quot;, &quot;Animal clusters&quot;), options = layersControlOptions(collapsed = FALSE)) map Now, save your map saveWidget(map, &quot;map_sites_animal.html&quot;) "]
]
